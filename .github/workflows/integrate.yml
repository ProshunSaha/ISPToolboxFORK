name: Build, Test, Push New Image to Prod

on:
  push:
    branches:
      - master
jobs:
  build:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2      
      with:
        submodules: true
    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install make
      run: |
        sudo apt-get update && sudo apt-get install -y make
    - name: Lint with flake8
      run: |
        pip install flake8==3.7.9
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        echo "if you're seeing this, your code is ugly ( ͡ಥ ͜ʖ ͡ಥ)"
        flake8 . --count --max-complexity=11 --max-line-length=127 --statistics --exclude *migrations*,*__init__.py
    - name: Log into Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Run Django Test Suite
      run: |
        # Test then cleanup containers
        make test
        docker stop $(docker ps -a -f "name=isptoolbox_" -q)
        docker rm $(docker ps -a -f "name=isptoolbox_" -q)
    - name: Build Static File Manifest
      run: |
        rm -r webserver/static/isptoolbox/build/
        make static_prod
    - name: Auto Commit staticfiles.json Manifest
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        file_pattern: webserver/staticfiles.json
        commit_message: "[STATICBOT] build staticfiles.json manifest"
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build Docker Image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
      run: |
        docker-compose build django-app nginx node-app
        echo $ECR_REGISTRY
        echo $ECR_REPOSITORY
        docker tag isptoolbox-nginx:latest $ECR_REGISTRY/isptoolbox-nginx:latest
        docker tag isptoolbox-django:latest $ECR_REGISTRY/isptoolbox-django:latest
        docker tag isptoolbox-node:latest $ECR_REGISTRY/isptoolbox-node:latest
        docker push $ECR_REGISTRY/isptoolbox-django:latest
        docker push $ECR_REGISTRY/isptoolbox-nginx:latest
        docker push $ECR_REGISTRY/isptoolbox-node:latest
