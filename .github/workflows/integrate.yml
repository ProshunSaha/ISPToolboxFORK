name: CI workflow

on:
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      # Start Services - Redis and PostGIS
      redis:
        image: redis:6.0.8
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgis/postgis:11-3.0
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: django_test
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v2      
    - name: Setup Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install static libs
      run: |
        sudo apt-get update && sudo apt-get install -y gdal-bin python-gdal python3-gdal libglib2.0-0 libsm6 libxext6 libxrender-dev
        sudo apt-get install postgis
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r webserver/requirements.txt
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        # THIS LINTER IS PRETTY SWEET, TOO MANY ERRORS AT THIS POINT - TODO - fix errors
        # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Run Django Test Suite
      run: |
        python webserver/manage.py test webserver
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build Docker Image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-ecr-repo
          IMAGE_TAG: ${{ github.sha }}
      run: |
        docker-compose build
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
