# Generated by Django 3.1.1 on 2021-03-11 01:58

import IspToolboxApp.Models.MarketEvaluatorModels
import IspToolboxApp.Models.MarketingConvertModels
import IspToolboxApp.Models.MarketingModels
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MlabUszip1052020',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(db_column='State', max_length=5)),
                ('zipcode', models.DecimalField(db_column='Zipcode', decimal_places=65535, max_digits=65535)),
                ('download_mbit_s_field', models.DecimalField(db_column='Download (Mbit/s)', decimal_places=65535, max_digits=65535)),
                ('upload_mbit_s_field', models.DecimalField(db_column='Upload (Mbit/s)', decimal_places=65535, max_digits=65535)),
            ],
            options={
                'db_table': 'mlab_uszip_10_5_2020',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StandardizedMlab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('down', models.DecimalField(blank=True, db_column='down', decimal_places=65535, max_digits=65535, null=True)),
                ('up', models.DecimalField(blank=True, db_column='up', decimal_places=65535, max_digits=65535, null=True)),
                ('postalcode', models.CharField(blank=True, db_column='postalcode', max_length=10, null=True)),
            ],
            options={
                'db_table': 'standardized_mlab',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StandardizedPostal',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('code', models.CharField(blank=True, max_length=10, null=True)),
                ('geog', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, geography=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'standardized_postal',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tl2019UsCounty',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('statefp', models.CharField(blank=True, max_length=2, null=True)),
                ('countyfp', models.CharField(blank=True, max_length=3, null=True)),
                ('countyns', models.CharField(blank=True, max_length=8, null=True)),
                ('geoid', models.CharField(blank=True, max_length=5, null=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('namelsad', models.CharField(blank=True, max_length=100, null=True)),
                ('lsad', models.CharField(blank=True, max_length=2, null=True)),
                ('classfp', models.CharField(blank=True, max_length=2, null=True)),
                ('mtfcc', models.CharField(blank=True, max_length=5, null=True)),
                ('csafp', models.CharField(blank=True, max_length=3, null=True)),
                ('cbsafp', models.CharField(blank=True, max_length=5, null=True)),
                ('metdivfp', models.CharField(blank=True, max_length=5, null=True)),
                ('funcstat', models.CharField(blank=True, max_length=1, null=True)),
                ('aland', models.FloatField(blank=True, null=True)),
                ('awater', models.FloatField(blank=True, null=True)),
                ('intptlat', models.CharField(blank=True, max_length=11, null=True)),
                ('intptlon', models.CharField(blank=True, max_length=12, null=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('geog', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, geography=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'tl_2019_us_county',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tl2019UsZcta510',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('zcta5ce10', models.CharField(blank=True, max_length=5, null=True)),
                ('geoid10', models.CharField(blank=True, max_length=5, null=True)),
                ('classfp10', models.CharField(blank=True, max_length=2, null=True)),
                ('mtfcc10', models.CharField(blank=True, max_length=5, null=True)),
                ('funcstat10', models.CharField(blank=True, max_length=1, null=True)),
                ('aland10', models.FloatField(blank=True, null=True)),
                ('awater10', models.FloatField(blank=True, null=True)),
                ('intptlat10', models.CharField(blank=True, max_length=11, null=True)),
                ('intptlon10', models.CharField(blank=True, max_length=12, null=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'tl_2019_us_zcta510',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BuildingDetection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('input_geometryCollection', django.contrib.gis.db.models.fields.GeometryField(srid=4326)),
                ('imagesToLoad', models.IntegerField(default=0)),
                ('imagesLoaded', models.IntegerField(default=0)),
                ('inferencesRun', models.IntegerField(default=0)),
                ('inferenceComplete', models.BooleanField(default=False)),
                ('thresholdComplete', models.BooleanField(default=False)),
                ('polygonalizationComplete', models.BooleanField(default=False)),
                ('output_geometryCollection', django.contrib.gis.db.models.fields.GeometryCollectionField(blank=True, null=True, srid=4326)),
                ('completed', models.DateTimeField(blank=True, null=True)),
                ('error', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MarketingAccount',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('fbid', models.BigIntegerField(editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='MarketingPinConversion',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('task', models.CharField(max_length=100)),
                ('token', models.CharField(default=IspToolboxApp.Models.MarketingConvertModels.createToken, editable=False, max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('include', django.contrib.gis.db.models.fields.GeometryCollectionField(blank=True, null=True, srid=4326)),
                ('exclude', django.contrib.gis.db.models.fields.GeometryCollectionField(blank=True, null=True, srid=4326)),
                ('num_pins', models.IntegerField(validators=[django.core.validators.MaxValueValidator(200), django.core.validators.MinValueValidator(0)])),
                ('error', models.CharField(blank=True, max_length=100, null=True)),
                ('include_output', django.contrib.gis.db.models.fields.GeometryCollectionField(blank=True, null=True, srid=4326)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('logrecno', models.IntegerField(primary_key=True, serialize=False)),
                ('techcode', models.IntegerField(blank=True, null=True)),
                ('maxaddown', models.FloatField(blank=True, null=True)),
                ('maxadup', models.FloatField(blank=True, null=True)),
                ('providername', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='WebsocketToken',
            fields=[
                ('token', models.CharField(default=IspToolboxApp.Models.MarketEvaluatorModels.createTokenDefault, editable=False, max_length=50, primary_key=True, serialize=False)),
                ('expiry', models.DateTimeField(default=IspToolboxApp.Models.MarketEvaluatorModels.createDateExpiryDefault, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='MarketingAudience',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('token', models.CharField(default=IspToolboxApp.Models.MarketingModels.createToken, editable=False, max_length=50)),
                ('include_geojson', django.contrib.gis.db.models.fields.GeometryField(srid=4326)),
                ('exclude_geojson', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='IspToolboxApp.marketingaccount')),
            ],
        ),
        migrations.CreateModel(
            name='MarketEvaluatorPipeline',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('task', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('token', models.CharField(default=IspToolboxApp.Models.MarketEvaluatorModels.createTokenDefault, editable=False, max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('include_geojson', django.contrib.gis.db.models.fields.GeometryField(srid=4326)),
                ('exclude_geojson', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('incomeServiceProvidersAvailable', models.BooleanField(default=True)),
                ('buildingPrecomputed', models.BooleanField(default=True)),
                ('buildingPolygons', django.contrib.gis.db.models.fields.GeometryCollectionField(blank=True, null=True, srid=4326)),
                ('buildingCount', models.BigIntegerField(default=0)),
                ('buildingCompleted', models.DateTimeField(blank=True, null=True)),
                ('buildingError', models.CharField(blank=True, max_length=100, null=True)),
                ('averageMedianIncome', models.FloatField(default=0)),
                ('incomeComplete', models.DateTimeField(blank=True, null=True)),
                ('incomeError', models.CharField(blank=True, max_length=100, null=True)),
                ('serviceProviderComplete', models.DateTimeField(blank=True, null=True)),
                ('serviceProviderError', models.CharField(blank=True, max_length=100, null=True)),
                ('completed', models.DateTimeField(blank=True, null=True)),
                ('error', models.CharField(blank=True, max_length=100, null=True)),
                ('serviceProvidersLogRecNos', models.ManyToManyField(to='IspToolboxApp.ServiceProvider')),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='MarketEvaluatorSummary',
            fields=[
            ],
            options={
                'verbose_name': 'Market Evaluator Summary',
                'verbose_name_plural': 'Market Evaluator Summary',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('IspToolboxApp.marketevaluatorpipeline',),
        ),
    ]
